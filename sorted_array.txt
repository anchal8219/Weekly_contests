class Solution {
public:
    int cnt(int n){
        int c=0;
        while (n) {
        n = n & (n - 1);
        c++;
    }

        return c;
    }
    
    bool canSortArray(vector<int>& nums) {
        
        int n=nums.size();
        vector<int>v;
        for(int i=0;i<n;i++) 
            v.push_back(cnt(nums[i]));
        
        for(int i=0;i<n-1;i++){
            for(int j=0;j<n-i-1;j++){
                
                if(nums[j]>nums[j+1] &&  v[j]==v[j+1]) swap(nums[j],nums[j+1]);
                // else if(nums[j]>nums[j+1]) return false;
                 
            }
        }
        // return true;
        
        
        return is_sorted(nums.begin(),nums.end());
        
    }
};


//or

bool canSortArray(vector<int>& nums) {
        int n = nums.size();
       if(is_sorted(nums.begin(),nums.end())) return true;
       
        vector<int> ans(n);
        for(int i=0;i<n;i++) ans[i] =__builtin_popcount(nums[i]) ;
        
        for(int i=0;i<n-1;i++){
            for(int j=0;j<n-i-1;j++){
                if(nums[j]>nums[j+1] &&  ans[j]==ans[j+1]) swap(nums[j],nums[j+1]);
                else if(nums[j]>nums[j+1]) return false;
            }
        }
        return true;
}